import io

pub fn test() {
    // read tests
    f = io.open("utf8_text", "rb")

    try {
        f.write("a")
        println("[Error] Expected error while writing to a file opened in 'r'!")
    } catch(file_error fe) {}
    
    s = f.read(370)
    if(s.len() != 370 or s.size() != 448) {
        println("[Error] Invalid content returned by file.read(n): expected len: 370, size: 448 recevied len: ", s.len(), " size: ", s.size())
    }
    t = f.read(177)
    if(t.len() != 177 or t.size() != 269) {
        println("[Error] Consecutive read failed! expected len: 177 size: 269 received len: ", t.len(), " received size: ", t.size())
    }
    if(t[17] != "∞") {
        println("[Error] Unicode reading failed! expected '∞', received '", t[17], "'")
    }
    f.read(204)
    val = f.read()
    if(val != "═") {
        println("[Error] Reading a single unicode character failed! expected '═', received '",  val, "'")
    }
    val = f.readbyte()
    if(val != 226) {
        println("[Error] Reading a byte failed! expected 226, received ", val)
    }
    val = f.tell()
    if(val != 997) {
        println("[Error] file.tell() failed! expected 997, received ", val)
    }
    f.rewind()
    if(f.tell() != 0) {
        println("[Error] file.rewind() failed! expected tell() to return 0, received ", f.tell())
    }
    f.seek(999, io.SEEK_SET)
    val = f.read()
    if(val != "═") {
        println("[Error] file.seek() failed! expected to read '═', received '", val, "'")
    }
    val = str(f.readbytes(3).to_bytes())
    if(val != "(226, 149, 144)") {
        println("[Error] Reading three bytes failed! expected (226, 149, 144), recevied ", val)
    }
    s = f.readall()
    if(s.len() != 6410 or s.size() != 12400) {
        println("[Error] f.readall() failed! expected len 6410 size 12400, received len ", s.len(), " size ", s.size())
    }
    f.close()
    try {
        f.read()
        println("[Error] Reading after closing file should fail!")
    } catch(file_error fe) {}

    // write tests
    f = io.open("file_write_test.next", "wb")
    try {
        f.read()
        println("[Error] Reading from a write only file should throw!")
    } catch(file_error e) {}

    f.write("Hello 😪\n")
    f.writebyte(97)
    f.writebyte(10)
    f.writebytes(bits.from(0xaa989ff0))
    f.writebyte(10)
    f.fmt("{:k^20}", "😪")
    f.close()
    
    try {
        f.write("Hi!")
        println("[Error] Writing to a closed file should throw!")
    } catch(file_error e) {}

    f = io.open("file_write_test.next", "rb+")

    s = f.read(8)
    if(s != "Hello 😪\n") {
        println("[Error] file.write() failed! expected to read back \"Hello 😪\\n\", recevied \"", s, "\"")
    }
    s = f.read(2)
    if(s != "a\n") {
        println("[Error] file.writebyte() failed! expected to read 'a\\n', received '", s, "'")
    }
    s = f.read(2)
    if(s != "😪\n") {
        println("[Error] file.writebytes() failed! expected to read '😪\\n', recevied '", s, "'")
    }
    s = f.read(20)
    if(s != "kkkkkkkkk😪kkkkkkkkkk") {
        println("[Error] file.fmt() failed! expected to read 'kkkkkkkkk😪kkkkkkkkkk', recevied '", s, "'")
    }

    f.write("Additional write!")
    f.close()

    f = io.open("file_write_test.next", "rb")
    f.read(32)
    s = f.read(17)
    if(s != "Additional write!") {
        println("[Error] r+ failed! expected to read 'Additional write', received '", s, "'")
    }
    f.close()
    ret true
}
