res = true

fn expect(arr, idx, val) {
    if(arr[idx] != val) {
        print("Error in arr.get(", idx, ") -> Expected ", val, ", Received : ", arr[idx], "\n")
        res = false
    }
}

fn expect_err(arr, idx) {
    try {
        x = arr[idx]
        print("[ERROR] ", arr, " should not be accessible with idx ", idx, "!\n")
        res = false
    } catch(type_error e) {}
    catch(index_error f) {}
}

pub fn test() {

    arr = [2.32, "Hello", []]

    expect(arr, 0, 2.32)
    expect(arr, 1, "Hello")
    expect(arr, -2, "Hello")
    expect(arr, -3, 2.32)

    expect_err(arr, 2.32)
    expect_err(arr, "2")
    expect_err(arr, 1.000000001)
    expect_err(arr, 100)
    expect_err(arr, -100)

    arr[2] = ["Nest", "Array"]

    expect(arr[2], 0, "Nest")
    expect(arr[2], 1, "Array")

    if(str(arr) != "[2.32, \"Hello\", [\"Nest\", \"Array\"]]") {
        println("[Error] array.str() is not working!")
        res = false
    }

    arr = 3

    ret res
}
