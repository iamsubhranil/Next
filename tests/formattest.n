res = true

fn expect(res, val) {
    if(res != val) {
        print("[Error] Expected '", res, "', Received '",val, "'!\n")
        res = false
    } else {
        //print("[Passed] '", res, "' = '", val, "'!\n")
    }
}

fn expect_err(fmtstring, err) {
    try {
        fmt(fmtstring)
        print("[Error] Expected error for fmt(\"", fmtstring,"\") : ", err, "\n")
        res = false
    } catch(format_error fe) {}
}

fn expect_err(fmtstring, err, val) {
    try {
        fmt(fmtstring, val)
        print("[Error] Expected error for fmt(\"", fmtstring,"\",", val, ") : ", err, "\n")
        res = false
    } catch(format_error fe) {}
}

fn expect_err(fmtstring, err, val1, val2) {
    try {
        fmt(fmtstring, val1, val2)
        print("[Error] Expected error for fmt(\"", fmtstring,"\",", val1, ",", val2, ") : ", err, "\n")
        res = false
    } catch(format_error fe) {}
}

pub fn test() {
    expect("42", fmt("{0}", 42))
    expect("before 42", fmt("before {0}", 42))
    expect("42 after", fmt("{0} after", 42))
    expect("before 42 after", fmt("before {0} after", 42))
    expect("answer = 42", fmt("{0} = {1}", "answer", 42))
    expect("42 is the answer", fmt("{1} is the {0}", "answer", 42))
    expect("abracadabra", fmt("{0}{1}{0}", "abra", "cad"))

    expect("42  ", fmt("{0:<4}", 42))
    expect("-42  ", fmt("{0:<5}", -42))
    expect("42  ", fmt("{0:<4o}", 0o42))
    expect("42  ", fmt("{0:<4x}", 0x42))
    expect("abc  ", fmt("{0:<5}", "abc"))

    expect("  42", fmt("{0:>4}", 42))
    expect("  -42", fmt("{0:>5}", -42))
    expect("  42", fmt("{0:>4o}", 0o42))
    expect("  42", fmt("{0:>4x}", 0x42))
    expect("  abc", fmt("{0:>5}", "abc"))

    expect(" 42  ", fmt("{0:^5}", 42))
    expect(" 42  ", fmt("{0:^5o}", 0o42))
    expect(" 42  ", fmt("{0:^5x}", 0x42))
    expect(" -42 ", fmt("{0:^5}", -42))
    expect(" abc  ", fmt("{0:^6}", "abc"))

    expect("**42", fmt("{0:*>4}", 42))
    expect("**-42", fmt("{0:*>5}", -42))
    expect("abc**", fmt("{0:*<5}", "abc"))

    expect("+42", fmt("{0:+}", 42))
    expect("-42", fmt("{0:+}", -42))
    expect("+42", fmt("{0:+}", 42))

    expect("42", fmt("{0:-}", 42))
    expect("-42", fmt("{0:-}", -42))
    expect("42", fmt("{0:-}", 42))

    expect(" 42", fmt("{0: }", 42))
    expect("-42", fmt("{0: }", -42))
    expect(" 42", fmt("{0: }", 42))

    expect("42", fmt("{0:#d}", 42))
    expect("-42", fmt("{0:#d}", -42))
    expect("0b101010", fmt("{0:#b}", 42))
    expect("0B101010", fmt("{0:#B}", 42))
    expect("-0b101010", fmt("{0:#b}", -42))
    expect("0x42", fmt("{0:#x}", 0x42))
    expect("0X42", fmt("{0:#X}", 0x42))
    ///expect("-0x42", fmt("{0:#x}", -0x42))
    expect("0", fmt("{0:#o}", 0))
    expect("042", fmt("{0:#o}", 0o42))
    //expect("-042", fmt("{0:#o}", -0o42))

    expect(" -42", fmt("{0:4}", -42))
    expect("   -1.23", fmt("{0:8}", -1.23))

    expect(" -42", fmt("{0:{1}}", -42, 4))
    expect("   42", fmt("{0:{1}}", 42, 5))
    expect("   -1.23", fmt("{0:{1}}", -1.23, 8))

    /* this is the double equivalent of 0x0...01.
        since we use the last bit to denote the value type, this is not
        representable in Next for now.
        instead, we try to check for 0x0...10, which is the least
        double Next can represent.
    expect("4.9406564584124654417656879286822137236505980261432476442558568250067550727020875186529983636163599237979656469544571773092665671035593979639877479601078187812630071319031140452784581716784898210368871863605699873072305000638740915356498438731247339727316961514003171538539807412623856559117102665855668676818703956031062493194527159149245532930545654440112748012970999954193198940908041656332452475714786901472678015935523861155013480352649347201937902681071074917033322268447533357208324319361e-324",
        fmt("{:.494}", 4.9406564584124654E-324))
    */
    expect("7.9050503334599447068251006858915419578409568418291962308093709200108081163233400298447973817861758780767450351271314836948265073656950367423803967361725100500208114110449824724455330746855837136590194981769119796915688001021985464570397501969995743563707138422405074461663691860198170494587364265369069882909926329649699989111243454638792852688873047104180396820753599926709118305452866650131923961143659042356284825496838177848021568564238955523100644289713719867253315629516053371533318910977e-323",
        fmt("{:.494}", 7.90505033345994470682510068589E-323))

    expect
        fmt("{:.838A}", -2.14001164E+38))
    expect("123.", fmt("{:#.0f}", 123.0))
    expect("1.23", fmt("{:.02f}", 1.234))
    expect("0.001", fmt("{:.1g}", 0.001))

    expect("0", fmt("{0:b}", 0))
    expect("101010", fmt("{0:b}", 42))

    expect("First, thou shalt count to three",
                fmt("First, thou shalt count to {0}", "three"))
    expect("Bring me a shrubbery", fmt("Bring me a {}", "shrubbery"))
    expect("From 1 to 3", fmt("From {} to {}", 1, 3))

    expect("a, b, c", fmt("{0}, {1}, {2}", "a", "b", "c"))
    expect("a, b, c", fmt("{}, {}, {}", "a", "b", "c"))
    expect("c, b, a", fmt("{2}, {1}, {0}", "a", "b", "c"))
    expect("abracadabra", fmt("{0}{1}{0}", "abra", "cad"))

    expect("true", fmt("{}", true))
    expect("false", fmt("{}", false))
    expect("1", fmt("{:d}", true))
    expect("true ", fmt("{:5}", true))

    expect("0", fmt("{0:b}", 0))
    expect("101010", fmt("{0:b}", 42))
    expect("-101010", fmt("{0:b}", -42))
    expect("11000000111001", fmt("{0:b}", 12345))
    expect("10010001101000101011001111000", fmt("{0:b}", 0x12345678))
    expect("10010000101010111100110111101111", fmt("{0:b}", 0x90ABCDEF))

    expect("0", fmt("{0}", 0))
    expect("42", fmt("{0}", 42))
    expect("42", fmt("{0:d}", 42))
    expect("-42", fmt("{0}", -42))
    expect("12345", fmt("{0}", 12345))
    expect("67890", fmt("{0}", 67890))


    expect("0", fmt("{0:x}", 0))
    expect("42", fmt("{0:x}", 0x42))
    //expect("-42", fmt("{0:x}", -0x42))
    expect("12345678", fmt("{0:x}", 0x12345678))
    expect("90abcdef", fmt("{0:x}", 0x90abcdef))
    expect("12345678", fmt("{0:X}", 0x12345678))
    expect("90ABCDEF", fmt("{0:X}", 0x90ABCDEF))

    expect("0", fmt("{0:o}", 0))
    expect("42", fmt("{0:o}", 0o42))
    //expect("-42", fmt("{0:o}", -0o42))
    expect("12345670", fmt("{0:o}", 0o12345670))

    expect("0.000000", fmt("{:f}", 0.0))
    expect("0", fmt("{:g}", 0.0))
    expect("392.65", fmt("{:}", 392.65))
    expect("392.65", fmt("{:g}", 392.65))
    expect("392.65", fmt("{:G}", 392.65))
    expect("392.650000", fmt("{:f}", 392.65))
    expect("392.650000", fmt("{:F}", 392.65))

    expect("0", fmt("{:.0f}", 0.0))
    expect("0", fmt("{:.0f}", 0.01))
    expect("0", fmt("{:.0f}", 0.1))
    expect("0.000", fmt("{:.3f}", 0.00049))
    expect("0.001", fmt("{:.3f}", 0.0005))
    expect("0.001", fmt("{:.3f}", 0.00149))
    expect("0.002", fmt("{:.3f}", 0.0015))
    expect("1.000", fmt("{:.3f}", 0.9999))
    expect("0.00123", fmt("{:.3}", 0.00123))
    expect("0.1", fmt("{:.16g}", 0.1))

    expect("left aligned                  ", fmt("{:<30}", "left aligned"))
    expect("                 right aligned",
                fmt("{:>30}", "right aligned"))
    expect("           centered           ", fmt("{:^30}", "centered"))
    expect("***********centered***********", fmt("{:*^30}", "centered"))

    expect("+3.140000 -3.140000", fmt("{:+f} {:+f}", 3.14, -3.14))
    expect(" 3.140000 -3.140000", fmt("{: f} {: f}", 3.14, -3.14))
    expect("3.140000 -3.140000", fmt("{:-f} {:-f}", 3.14, -3.14))

    expect("int: 42  hex: 2a  oct: 52",
                fmt("int: {0:d}  hex: {0:x}  oct: {0:o}", 42))
    expect("int: 42  hex: 0x2a  oct: 052",
                fmt("int: {0:d}  hex: {0:#x}  oct: {0:#o}", 42))

    expect("The answer is 42", fmt("The answer is {}", 42))

    expect("0123456789abcdefg",
                fmt("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", 0, 1, 2, 3, 4, 5,
                            6, 7, 8, 9, "a", "b", "c", "d", "e", "f", "g"))

	expect_err("{:{}}", "argument not found", 2)
	expect_err("{:.{}}", "argument not found", 2.0)
	expect_err("{:s}", "invalid type specifier", 2)
	// we allow booleans to be formatted as strings
	// expect_err("{:s}", "invalid type specifier", true)
	expect_err("{:s}", "invalid type specifier", 2.0)
	expect_err("{:d}", "invalid type specifier", "s")

	expect_err("{0x}", "invalid format string")
	expect_err("{-}", "invalid format string")
	expect_err("{:{0x}}", "invalid format string", 2)
	expect_err("{:{-}}", "invalid format string", 2)
	expect_err("{:.{0x}}", "invalid format string", 2)
	expect_err("{:.{-}}", "invalid format string", 2)
	expect_err("{:.x}", "missing precision specifier", 2)
	expect_err("{}", "argument not found")
	expect_err("{1}", "argument not found", 2)
	expect_err("{1}{}",
               "cannot switch from manual to automatic argument indexing", 2,
               2)
	expect_err("{}{1}",
               "cannot switch from automatic to manual argument indexing", 2,
               2)


    ret res
}
