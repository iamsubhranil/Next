import jit

fn compute_row(n, size, fac, shift) {
    bits = 0
    ci = (n * fac) - 1.0
    res = 0
    x = 0
    while(x < size) {
        zr = 0, zi = 0, cr = (x * fac) - 1.5, i = 50, zrn = 0, zin = 0
        do {
            zi = 2.0 * zr * zi + ci
            zr = zrn - zin + cr
            zin = zi * zi
            zrn = zr * zr
        } while(((zin + zrn) < 4.0) and ((i = i - 1) > 0))

        bits = bits << 1
        if(i == 0) {
            bits = bits + 1
        }

        if(x & 7 == 7) {
            res = res + bits
            // buffer.insert_byte(bits)
            bits = 0
        }
        x = x + 1
    }
    if(shift != 0) {
        bits = bits << shift
        res = res + bits
        // buffer.insert_byte(bits)
    }
    ret res
}

fn compute(size) {
    fac = 2.0 / size
    shift = 0
    // % 8 replacement
    if(size & 7 != 0) {
        shift = 8 - size & 7
    }
    // buffer = bits()
    res = 0
    n = 0
    while(n < size) {
        res = res + compute_row(n, size, fac, shift)
        n = n + 1
    }
    ret res
}

fn measure(function, name, arg) {
    start = clock()
    r = function(arg)
    end = clock()
    println(name, " took: ", (end - start) / clocks_per_sec, "s")
    ret (r, end - start)
}

fn cool(w) {
    count = 0
    i = 2
    while(i < w) {
        j = 1
        add_factor = 1
        while(j < 10) {
            if(j == 3428) {
                j = 647
            } else if(j == 647) {
                add_factor = 2
            }
            j = j + add_factor
        }
        i = i + 1
    }
    ret count
}


interp = measure(compute@1, "Interpreted Run", 500)

comp_time = measure(jit.compile@1, "Compilation", compute_row@4)

compiled = measure(compute@1, "Compiled Run", 500)

if(interp[0] != compiled[0]) {
    println("[Err] Results do not match! Interp: ", interp, " Compiled: ", compiled)
} else {
    println("Result: ", compiled[0])
    println("Speedup: ", interp[1] / compiled[1])
    println("Speedup (+CompTime): ", interp[1] / (compiled[1] + comp_time[1]))
}
