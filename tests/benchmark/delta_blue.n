// Copyright 2011 Google Inc. All Rights Reserved.
// Copyright 1996 John Maloney and Mario Wolczko
//
// This file is part of GNU Smalltalk.
//
// GNU Smalltalk is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later version.
//
// GNU Smalltalk is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// GNU Smalltalk; see the file COPYING.  If not, write to the Free Software
// Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// Translated first from Smalltalk to JavaScript, and finally to
// Dart by Google 2008-2010.
//
// Translated to Wren by Bob Nystrom 2014.
//
// Translated to Next by Subhranil Mukherjee, 2020.
// Comments are unchanged from the Wren version.

// A Wren implementation of the DeltaBlue constraint-solving
// algorithm, as described in:
//
// "The DeltaBlue Algorithm: An Incremental Constraint Hierarchy Solver"
//   Bjorn N. Freeman-Benson and John Maloney
//   January 1990 Communications of the ACM,
//   also available as University of Washington TR 89-08-06.
//
// Beware: this benchmark is written in a grotesque style where
// the constraint model is built by side-effects from constructors.
// I've kept it this way to avoid deviating too much from the original
// implementation.

// Strengths are used to measure the relative importance of constraints.
// New strengths may be inserted in the strength hierarchy without
// disrupting current constraints.  Strengths cannot be created outside
// this class, so == can be used for value comparison.

ORDERED = nil

import math

class Strength {
    pub:
        value, name
        new(v, n) {
            value = v
            name = n
        }

        fn nextWeaker() {
            ret ORDERED[value]
        }

        static fn stronger(s1, s2) { ret s1.value < s2.value }
        static fn weaker(s1, s2) { ret s1.value > s2.value }
        static fn weakest(s1, s2) { 
            if(weaker(s1, s2)) { 
                ret s1
            } else {
                ret s2
            }
        }
        static fn strongest(s1, s2) {
            if(stronger(s1, s2)) {
                ret s1
            } else {
                ret s2 
            }
        }
}

// Compile time computed constants.
REQUIRED        = Strength(0, "required")
STRONG_REFERRED = Strength(1, "strongPreferred")
PREFERRED       = Strength(2, "preferred")
STRONG_DEFAULT  = Strength(3, "strongDefault")
NORMAL          = Strength(4, "normal")
WEAK_DEFAULT    = Strength(5, "weakDefault")
WEAKEST         = Strength(6, "weakest")

ORDERED = [
  WEAKEST, WEAK_DEFAULT, NORMAL, STRONG_DEFAULT, PREFERRED, STRONG_REFERRED
]

ThePlanner = nil

class Constraint {
    pub:
        strength

        new(s) {
            strength = s
        }

        // Activate this constraint and attempt to satisfy it.
        fn addConstraint() {
            this.addToGraph()
            ThePlanner.incrementalAdd(this)
        }

        // Attempt to find a way to enforce this constraint. If successful,
        // record the solution, perhaps modifying the current dataflow
        // graph. Answer the constraint that this constraint overrides, if
        // there is one, or nil, if there isn't.
        // Assume: I am not already satisfied.
        fn satisfy(mark) {
            this.chooseMethod(mark)
            if (!this.isSatisfied()) {
                if (strength == REQUIRED) {
                    println("Could not satisfy a required constraint!")
                }
                ret nil
            }

            this.markInputs(mark)
            out = this.output()
            overridden = out.determinedBy
            if (overridden != nil) { overridden.markUnsatisfied() }
            out.determinedBy = this
            if (!ThePlanner.addPropagate(this, mark)) { println("Cycle encountered") }
            out.mark = mark
            ret overridden
        }

        fn destroyConstraint() {
            if (this.isSatisfied()) { ThePlanner.incrementalRemove(this) }
            this.removeFromGraph()
        }

        // Normal constraints are not input constraints.  An input constraint
        // is one that depends on external state, such as the mouse, the
        // keybord, a clock, or some arbitraty piece of imperative code.
        fn isInput() { ret false }
}

// Abstract superclass for constraints having a single possible output variable.
class UnaryConstraint is Constraint {
    priv:
        isSat, _output
    pub:
        new(mo, s) {
            super(s)
            isSat = false
            _output = mo
            super.addConstraint()
        }

        // Adds this constraint to the constraint graph.
        fn addToGraph() {
            _output.addConstraint(this)
            isSat = false
        }

        // Decides if this constraint can be satisfied and records that decision.
        fn chooseMethod(mark) {
            isSat = (_output.mark != mark) and
                Strength.stronger(super.strength, _output.walkStrength)
        }

        fn markInputs(mark) {}

        // Calculate the walkabout strength, the stay flag, and, if it is
        // 'stay', the value for the current output of this constraint. Assume
        // this constraint is satisfied.
        fn recalculate() {
            _output.walkStrength = super.strength
            _output.stay = !this.isInput()
            if (_output.stay) { this.execute() } // Stay optimization.
        }

        // Records that this constraint is unsatisfied.
        fn markUnsatisfied() {
            isSat = false
        }

        fn inputsKnown(mark) { ret true }

        fn removeFromGraph() {
            if (_output != nil) {
                _output.removeConstraint(this)
                isSat = false
            }
        }

        fn isSatisfied() { ret isSat }

        fn output() { ret _output }
}

// Variables that should, with some level of preference, stay the same.
// Planners may exploit the fact that instances, if satisfied, will not
// change their output during plan execution.  This is called "stay
// optimization".
class StayConstraint is UnaryConstraint {
    pub:
        new(variable, strength) {
            super(variable, strength)
        }

        fn execute() {
            // Stay constraints do nothing.
        }
}

// A unary input constraint used to mark a variable that the client
// wishes to change.
class EditConstraint is UnaryConstraint {
    pub:
        new(variable, strength) {
            super(variable, strength)
        }

        // Edits indicate that a variable is to be changed by imperative code.
        fn isInput() { ret true }

        fn execute() {
            // Edit constraints do nothing.
        }
}

// Directions.
NONE = 1
FORWARD = 2
BACKWARD = 0

// Abstract superclass for constraints having two possible output
// variables.
class BinaryConstraint is Constraint {
    pub:
        v1, v2, direction
        new(va1, va2, strength) {
            super(strength)
            v1 = va1
            v2 = va2
            direction = NONE
            super.addConstraint()
        }

        // Decides if this constraint can be satisfied and which way it
        // should flow based on the relative strength of the variables related,
        // and record that decision.
        fn chooseMethod(mark) {
            if (v1.mark == mark) {
                if (v2.mark != mark and
                    Strength.stronger(super.strength, v2.walkStrength)) {
                    direction = FORWARD
                } else {
                    direction = NONE
                }
            }

            if (v2.mark == mark) {
                if (v1.mark != mark and
                    Strength.stronger(super.strength, v1.walkStrength)) {
                    direction = BACKWARD
                } else {
                    direction = NONE
                }
            }

            if (Strength.weaker(v1.walkStrength, v2.walkStrength)) {
                if (Strength.stronger(super.strength, v1.walkStrength)) {
                    direction = BACKWARD
                } else {
                    direction = NONE
                }
                } else {
                if (Strength.stronger(super.strength, v2.walkStrength)) {
                    direction = FORWARD
                } else {
                    direction = BACKWARD
                }
            }
        }

        // Add this constraint to the constraint graph.
        fn addToGraph() {
            v1.addConstraint(this)
            v2.addConstraint(this)
            direction = NONE
        }

        // Answer true if this constraint is satisfied in the current solution.
        fn isSatisfied() { ret direction != NONE }

        // Mark the input variable with the given mark.
        fn markInputs(mark) {
            input().mark = mark
        }

        // Returns the current input variable
        fn input() { if(direction == FORWARD) { ret v1 } else { ret v2 } }

        // Returns the current output variable.
        fn output() { if(direction == FORWARD) { ret v2 } else { ret v1 } }

        // Calculate the walkabout strength, the stay flag, and, if it is
        // 'stay', the value for the current output of this
        // constraint. Assume this constraint is satisfied.
        fn recalculate() {
            ihn = input()
            out = output()
            out.walkStrength = Strength.weakest(super.strength, ihn.walkStrength)
            out.stay = ihn.stay
            if (out.stay) { this.execute() }
        }

        // Record the fact that this constraint is unsatisfied.
        fn markUnsatisfied() {
            direction = NONE
        }

        fn inputsKnown(mark) {
            i = input()
            ret i.mark == mark or i.stay or i.determinedBy == nil
        }

        fn removeFromGraph() {
            if (v1 != nil) { v1.removeConstraint(this) }
            if (v2 != nil) { v2.removeConstraint(this) }
            direction = NONE
        }
}

// Relates two variables by the linear scaling relationship: "v2 =
// (v1 * scale) + offset". Either v1 or v2 may be changed to maintain
// this relationship but the scale factor and offset are considered
// read-only.
class ScaleConstraint is BinaryConstraint {
    priv:
        _scale, _offset
    pub:
        new(src, scale, offset, dest, strength) {
            _scale = scale
            _offset = offset
            super(src, dest, strength)
        }

        // Adds this constraint to the constraint graph.
        fn addToGraph() {
            super.addToGraph() // super.addToGraph?
            _scale.addConstraint(this)
            _offset.addConstraint(this)
        }

        fn removeFromGraph() {
            super.removeFromGraph() // super.removeFromGraph?
            if (_scale != nil) { _scale.removeConstraint(this) }
            if (_offset != nil) { _offset.removeConstraint(this) }
        }

        fn markInputs(mark) {
            super.markInputs(mark)
            _scale.mark = _offset.mark = mark
        }

        // Enforce this constraint. Assume that it is satisfied.
        fn execute() {
            if (super.direction == FORWARD) {
                super.v2.value = super.v1.value * _scale.value + _offset.value
            } else {
                // TODO: Is this the same semantics as ~/?
                super.v1.value = math.floor((super.v2.value - _offset.value) / _scale.value)
            }
        }

        // Calculate the walkabout strength, the stay flag, and, if it is
        // 'stay', the value for the current output of this constraint. Assume
        // this constraint is satisfied.
        fn recalculate() {
            ihn = super.input()
            out = super.output()
            out.walkStrength = Strength.weakest(super.strength, ihn.walkStrength)
            out.stay = ihn.stay and _scale.stay and _offset.stay
            if (out.stay) { execute() }
        }
}

// Constrains two variables to have the same value.
class EqualityConstraint is BinaryConstraint {
    pub:
        new(v1, v2, strength) {
            super(v1, v2, strength)
        }

        // Enforce this constraint. Assume that it is satisfied.
        fn execute() {
            super.output().value = super.input().value
        }
}

// A constrained variable. In addition to its value, it maintain the
// structure of the constraint graph, the current dataflow graph, and
// various parameters of interest to the DeltaBlue incremental
// constraint solver.
class Variable {
    priv:
        _name
    pub:
        constraints, determinedBy, mark, walkStrength, stay, value

        new(name, v) {
            constraints = []
            determinedBy = nil
            mark = 0
            walkStrength = WEAKEST
            stay = true
            _name = name
            value = v
        }

        // Add the given constraint to the set of all constraints that refer
        // this variable.
        fn addConstraint(constraint) {
            constraints.insert(constraint)
        }

        // Removes all traces of c from this variable.
        fn removeConstraint(constraint) {
            tc = constraints
            constraints = []
            for(t in tc) {
                if(t != constraint) {
                    constraints.insert(t)
                }
            }
            if (determinedBy == constraint) { determinedBy = nil }
        }
}

// A Plan is an ordered list of constraints to be executed in sequence
// to resatisfy all currently satisfiable constraints in the face of
// one or more changing inputs.
class Plan {
    priv:
        _list

    pub:
        new() {
            _list = []
        }

        fn addConstraint(constraint) {
            _list.insert(constraint)
        }

        fn size() { ret _list.size() }

        fn execute() {
            for (constraint in _list) {
                constraint.execute()
            }
        }
}

class Planner {
    priv:
        _currentMark
    pub:
        new() {
            _currentMark = 0
        }

        // Attempt to satisfy the given constraint and, if successful,
        // incrementally update the dataflow graph.  Details: If satifying
        // the constraint is successful, it may override a weaker constraint
        // on its output. The algorithm attempts to resatisfy that
        // constraint using some other method. This process is repeated
        // until either a) it reaches a variable that was not previously
        // determined by any constraint or b) it reaches a constraint that
        // is too weak to be satisfied using any of its methods. The
        // variables of constraints that have been processed are marked with
        // a unique mark value so that we know where we've been. This allows
        // the algorithm to avoid getting into an infinite loop even if the
        // constraint graph has an inadvertent cycle.
        fn incrementalAdd(constraint) {
            mark = newMark()
            overridden = constraint.satisfy(mark)
            while (overridden != nil) {
                overridden = overridden.satisfy(mark)
            }
        }

        // Entry point for retracting a constraint. Remove the given
        // constraint and incrementally update the dataflow graph.
        // Details: Retracting the given constraint may allow some currently
        // unsatisfiable downstream constraint to be satisfied. We therefore collect
        // a list of unsatisfied downstream constraints and attempt to
        // satisfy each one in turn. This list is traversed by constraint
        // strength, strongest first, as a heuristic for avoiding
        // unnecessarily adding and then overriding weak constraints.
        // Assume: [c] is satisfied.
        fn incrementalRemove(constraint) {
            out = constraint.output()
            constraint.markUnsatisfied()
            constraint.removeFromGraph()
            unsatisfied = removePropagateFrom(out)
            strength = REQUIRED
            while (true) {
                for (u in unsatisfied) {
                    if (u.strength == strength) { incrementalAdd(u) }
                    strength = strength.nextWeaker()
                }
                if (strength == WEAKEST) { break }
            }
        }

        // Select a previously unused mark value.
        fn newMark() { 
            _currentMark = _currentMark + 1
            ret _currentMark
        }

        // Extract a plan for resatisfaction starting from the given source
        // constraints, usually a set of input constraints. This method
        // assumes that stay optimization is desired; the plan will contain
        // only constraints whose output variables are not stay. Constraints
        // that do no computation, such as stay and edit constraints, are
        // not included in the plan.
        // Details: The outputs of a constraint are marked when it is added
        // to the plan under construction. A constraint may be appended to
        // the plan when all its input variables are known. A variable is
        // known if either a) the variable is marked (indicating that has
        // been computed by a constraint appearing earlier in the plan), b)
        // the variable is 'stay' (i.e. it is a constant at plan execution
        // time), or c) the variable is not determined by any
        // constraint. The last provision is for past states of history
        // variables, which are not stay but which are also not computed by
        // any constraint.
        // Assume: [sources] are all satisfied.
        fn makePlan(sources) {
            mark = newMark()
            plan = Plan()
            todo = sources
            while(todo.size() > 0) {
                constraint = todo.pop()
                if (constraint.output().mark != mark and constraint.inputsKnown(mark)) {
                    plan.addConstraint(constraint)
                    constraint.output().mark = mark
                    addConstraintsConsumingTo(constraint.output(), todo)
                }
            }
            ret plan
        }

        // Extract a plan for resatisfying starting from the output of the
        // given [constraints], usually a set of input constraints.
        fn extractPlanFromConstraints(constraints) {
            sources = []
            for (constraint in constraints) {
                // if not in plan already and eligible for inclusion.
                if (constraint.isInput() and constraint.isSatisfied()) { sources.insert(constraint) }
            }
            ret makePlan(sources)
        }

        // Recompute the walkabout strengths and stay flags of all variables
        // downstream of the given constraint and recompute the actual
        // values of all variables whose stay flag is true. If a cycle is
        // detected, remove the given constraint and answer
        // false. Otherwise, answer true.
        // Details: Cycles are detected when a marked variable is
        // encountered downstream of the given constraint. The sender is
        // assumed to have marked the inputs of the given constraint with
        // the given mark. Thus, encountering a marked node downstream of
        // the output constraint means that there is a path from the
        // constraint's output to one of its inputs.
        fn addPropagate(constraint, mark) {
            todo = [constraint]
            while (todo.size() > 0) {
                d = todo.pop()
                if (d.output().mark == mark) {
                    incrementalRemove(constraint)
                    ret false
                }

                d.recalculate()
                addConstraintsConsumingTo(d.output(), todo)
            }

            ret true
        }

        // Update the walkabout strengths and stay flags of all variables
        // downstream of the given constraint. Answer a collection of
        // unsatisfied constraints sorted in order of decreasing strength.
        fn removePropagateFrom(out) {
            out.determinedBy = nil
            out.walkStrength = WEAKEST
            out.stay = true
            unsatisfied = []
            todo = [out]
            while (todo.size() > 0) {
                v = todo.pop()
                for (constraint in v.constraints) {
                    if (!constraint.isSatisfied()) { unsatisfied.insert(constraint) }
                }

                determining = v.determinedBy
                for (next in v.constraints) {
                    if (next != determining and next.isSatisfied()) {
                        next.recalculate()
                        todo.insert(next.output())
                    }
                }
            }

            ret unsatisfied
        }

        fn addConstraintsConsumingTo(v, coll) {
            determining = v.determinedBy
            for (constraint in v.constraints) {
                if (constraint != determining and constraint.isSatisfied()) {
                    coll.insert(constraint)
                }
            }
        }
}

total = 0

// This is the standard DeltaBlue benchmark. A long chain of equality
// constraints is constructed with a stay constraint on one end. An
// edit constraint is then added to the opposite end and the time is
// measured for adding and removing this constraint, and extracting
// and executing a constraint satisfaction plan. There are two cases.
// In case 1, the added constraint is stronger than the stay
// constraint and values must propagate down the entire length of the
// chain. In case 2, the added constraint is weaker than the stay
// constraint so it cannot be accomodated. The cost in this case is,
// of course, very low. Typical situations lie somewhere between these
// two extremes.
fn chainTest(n) {
    ThePlanner = Planner()
    prev = nil
    first = nil
    last = nil

    // Build chain of n equality constraints.
    for (i in range(n + 1)) {
        v = Variable("v", 0)
        if (prev != nil) { EqualityConstraint(prev, v, REQUIRED) }
        if (i == 0) { first = v }
        if (i == n) { last = v }
        prev = v
    }

    StayConstraint(last, STRONG_DEFAULT)
    edit = EditConstraint(first, PREFERRED)
    plan = ThePlanner.extractPlanFromConstraints([edit])
    for (i in range(100)) {
        first.value = i
        plan.execute()
        total = total + last.value
        if(last.value != i) {
            println("Chain test failed.")
        }
    }
}

fn change(v, newValue) {
    edit = EditConstraint(v, PREFERRED)
    plan = ThePlanner.extractPlanFromConstraints([edit])
    for (i in range(10)) {
        v.value = newValue
        plan.execute()
    }

    edit.destroyConstraint()
}

// This test constructs a two sets of variables related to each
// other by a simple linear transformation (scale and offset). The
// time is measured to change a variable on either side of the
// mapping and to change the scale and offset factors.
fn projectionTest(n) {
    ThePlanner = Planner()
    scale = Variable("scale", 10)
    offset = Variable("offset", 1000)
    src = nil
    dst = nil

    dests = []
    for (i in range(n)) {
        src = Variable("src", i)
        dst = Variable("dst", i)
        dests.insert(dst)
        StayConstraint(src, NORMAL)
        ScaleConstraint(src, scale, offset, dst, REQUIRED)
    }

    change(src, 17)
    total = total + dst.value
    if (dst.value != 1170) { println("Projection 1 failed: ", dst.value) }

    change(dst, 1050)

    total = total + src.value
    if (src.value != 5) { println("Projection 2 failed: ", src.value) }

    change(scale, 5)
    for (i in range(n - 1)) {
        total = total + dests[i].value
        if (dests[i].value != i * 5 + 1000) { println("Projection 3 failed: ", dests[i].value) }
    }

    change(offset, 2000)
    for (i in range(n - 1)) {
        total = total + dests[i].value
        if (dests[i].value != i * 5 + 2000) { println("Projection 4 failed: ", dests[i].value) }
    }
}

start = clock()
for (i in range(40)) {
    chainTest(100)
    projectionTest(100)
}
start = (clock() - start) / clocks_per_sec
println(total)
println("elapsed: ", start)
