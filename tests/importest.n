import classtest.LinkedList
import it.testmodule

pub fn test() {
    res = true
    temp = testmodule.helloworld()
    if(temp != 1913) {
        print("[Error] Imported function calls not working!\n")
        res = false
    }
    obj = LinkedList(3)
    try {
        if(obj.mem != 3) {
            print("[Error] Imported call to classtest.LinkedList(3) failed!\n")
            res = false
        }
    } catch(runtime_error e) {
        print("[Error] classtest.LinkedList should have a member named 'mem!'\n")
        print(e, "\n")
        res = false
    }
    if(testmodule.var != 10) {
        print("[Error] Accessing global variable from testmodule failed!\n")
        res = false
    }
    testmodule.var = 20
    if(testmodule.var != 20) {
        print("[Error] Setting global variable from testmodule failed!\n")
        res = false
    }
    while(testmodule.var-- > 10) {}
    if(testmodule.var != 9) {
        print("[Error] Post decrementing global variable from testmodule failed!\n")
        res = false
    }

    try {
        s = import_file("a")
        println("[Error] Expected error on invalid import 'a'!")
        res = false
    } catch(import_error ie) {}


    try {
        s = import_file("it@12")
        println("[Error] Expected error on invalid import string 'it@12'!")
        res = false
    } catch(import_error ie) {}

    try {
        s = import_file("it..")
        println("[Error] Expected error on invalid import string 'it..'!")
        res = false
    } catch(import_error ie) {}

    try {
        s = import_file("it.testmodule.w")
        println("[Error] Expected error on invalid import 'it.testmodule.w'!")
        res = false
    } catch(import_error ie) {}

    // import testmodule once more
    tm = import_file("it.testmodule")
    if(tm.var != 9) {
        println("[Error] Expected tm.var to be 9 on dynamic import!")
        res = false
    }
    tm.var = 1
    if(testmodule.var != 1) {
        println("[Error] Expected testmodule.var to be 1!")
        res = false
    }

    ret res
}
